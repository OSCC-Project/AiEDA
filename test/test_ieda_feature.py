#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
@File : test_ieda_feature.py
@Author : yell
@Desc : test physical design features for iEDA
"""
######################################################################################
# # import aieda
# from import_aieda import import_aieda
# import_aieda()
######################################################################################

import os

os.environ["iEDA"] = "ON"

from aieda.workspace import workspace_create
from aieda.flows import DbFlow
from aieda.data import DataFeature
from aieda.flows import DataGeneration

steps = [
    "fixFanout",
    "place",
    "CTS",
    "optDrv",
    "optHold",
    "legalization",
    "route",
    "filler",
]


def test_feature_generation(workspace):
    # step 1 : init data generation
    data_gen = DataGeneration(workspace)

    # step 2 : test generate feature summary json
    for step in steps:
        data_gen.generate_feature(step=DbFlow.FlowStep(step))
        print("generate feature summary data in step {}".format(step))

    # step 3 : test generate drc
    data_gen.generate_drc()
    print("generate feature drc data in step drc")


def test_data_load(workspace):
    # step 1 : init data generation
    feature = DataFeature(workspace=workspace)

    # step 2 : test get feature summary db from iEDA flow
    for step in steps:
        feature_db = feature.load_feature_summary(
            flow=DbFlow(eda_tool="iEDA", step=DbFlow.FlowStep(step))
        )
        print("get feature summary data in step {}".format(step))

    # # step 3 : test get feature tool db from iEDA flow
    for step in steps:
        feature_db = feature.load_feature_tool(
            flow=DbFlow(eda_tool="iEDA", step=DbFlow.FlowStep(step))
        )
        print("get feature tool data in step {}".format(step))

    # # step 4 : test get feature map db from iEDA flow
    for step in steps:
        if step == "place" or step == "CTS":
            feature_db = feature.load_feature_map(
                flow=DbFlow(eda_tool="iEDA", step=DbFlow.FlowStep(step))
            )
            print("get feature eval db in step {}".format(step))

    # step 5 : test get drc db
    feature_db = feature.load_drc()
    print(1)


if __name__ == "__main__":

    current_dir = os.path.split(os.path.abspath(__file__))[0]
    root = current_dir.rsplit("/", 1)[0]

    workspace_dir = "{}/example/sky130_test".format(root)

    workspace = workspace_create(directory=workspace_dir, design="gcd")

    # not a must if flows has been run because feature would be generated by flow
    test_feature_generation(workspace)

    test_data_load(workspace)

    exit(0)
